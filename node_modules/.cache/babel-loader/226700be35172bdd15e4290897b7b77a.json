{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Welcome\\\\Videos\\\\my-app\\\\src\\\\components\\\\Select\\\\Select.js\";\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nconst SelectContext = createContext({});\n\nconst useSelectContext = () => {\n  const context = useContext(SelectContext);\n\n  if (!context) {\n    throw new Error(\"You cannot use options outside a select component!\");\n  }\n\n  return context;\n};\n\nconst Select = ({\n  children\n}) => {\n  const [active, setActive] = useState(null);\n  let trackId = 1;\n  return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: {\n      setActive,\n      active\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, React.Children.map(children, Child => {\n    const ClonedChild = React.cloneElement(Child, {\n      trackId\n    });\n    trackId += 1;\n    return ClonedChild;\n  }));\n};\n\nconst Option = ({\n  children,\n  trackId,\n  id,\n  onClick\n}) => {\n  const {\n    active,\n    setActive\n  } = useSelectContext();\n  useEffect(() => {\n    if (trackId === 1) setActive(id); // eslint-disable-next-line\n  }, []);\n\n  const handleClick = () => {\n    console.log(\"Clicked\");\n    onClick(active === id, id);\n    setActive(id);\n  };\n\n  return React.Children.map(children, Child => React.cloneElement(Child, {\n    className: Child.props.className + `${active === id ? \" active\" : \"\"}`,\n    onClick: handleClick\n  }));\n};\n\nSelect.Option = Option;\nexport default Select;","map":{"version":3,"sources":["C:/Users/Welcome/Videos/my-app/src/components/Select/Select.js"],"names":["React","useState","useEffect","createContext","useContext","SelectContext","useSelectContext","context","Error","Select","children","active","setActive","trackId","Children","map","Child","ClonedChild","cloneElement","Option","id","onClick","handleClick","console","log","className","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,EAAoDC,UAApD,QAAsE,OAAtE;AAEA,MAAMC,aAAa,GAAGF,aAAa,CAAC,EAAD,CAAnC;;AAEA,MAAMG,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,OAAO,GAAGH,UAAU,CAACC,aAAD,CAA1B;;AACA,MAAI,CAACE,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CAND;;AAQA,MAAME,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,IAAD,CAApC;AACA,MAAIY,OAAO,GAAG,CAAd;AACA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAED,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,KAAK,CAACc,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,EAA6BM,KAAK,IAAI;AACrC,UAAMC,WAAW,GAAGjB,KAAK,CAACkB,YAAN,CAAmBF,KAAnB,EAA0B;AAAEH,MAAAA;AAAF,KAA1B,CAApB;AACAA,IAAAA,OAAO,IAAI,CAAX;AACA,WAAOI,WAAP;AACD,GAJA,CADH,CADF;AASD,CAZD;;AAcA,MAAME,MAAM,GAAG,CAAC;AAAET,EAAAA,QAAF;AAAYG,EAAAA,OAAZ;AAAqBO,EAAAA,EAArB;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACrD,QAAM;AAAEV,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAwBN,gBAAgB,EAA9C;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,OAAO,KAAK,CAAhB,EAAmBD,SAAS,CAACQ,EAAD,CAAT,CADL,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAIA,QAAME,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAH,IAAAA,OAAO,CAACV,MAAM,KAAKS,EAAZ,EAAgBA,EAAhB,CAAP;AACAR,IAAAA,SAAS,CAACQ,EAAD,CAAT;AACD,GAJD;;AAKA,SAAOpB,KAAK,CAACc,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,EAA6BM,KAAK,IACvChB,KAAK,CAACkB,YAAN,CAAmBF,KAAnB,EAA0B;AACxBS,IAAAA,SAAS,EAAET,KAAK,CAACU,KAAN,CAAYD,SAAZ,GAAyB,GAAEd,MAAM,KAAKS,EAAX,GAAgB,SAAhB,GAA4B,EAAG,EAD7C;AAExBC,IAAAA,OAAO,EAAEC;AAFe,GAA1B,CADK,CAAP;AAMD,CAjBD;;AAmBAb,MAAM,CAACU,MAAP,GAAgBA,MAAhB;AAEA,eAAeV,MAAf","sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\";\n\nconst SelectContext = createContext({});\n\nconst useSelectContext = () => {\n  const context = useContext(SelectContext);\n  if (!context) {\n    throw new Error(\"You cannot use options outside a select component!\");\n  }\n  return context;\n};\n\nconst Select = ({ children }) => {\n  const [active, setActive] = useState(null);\n  let trackId = 1;\n  return (\n    <SelectContext.Provider value={{ setActive, active }}>\n      {React.Children.map(children, Child => {\n        const ClonedChild = React.cloneElement(Child, { trackId });\n        trackId += 1;\n        return ClonedChild;\n      })}\n    </SelectContext.Provider>\n  );\n};\n\nconst Option = ({ children, trackId, id, onClick }) => {\n  const { active, setActive } = useSelectContext();\n  useEffect(() => {\n    if (trackId === 1) setActive(id);\n    // eslint-disable-next-line\n  }, []);\n  const handleClick = () => {\n    console.log(\"Clicked\");\n    onClick(active === id, id);\n    setActive(id);\n  };\n  return React.Children.map(children, Child =>\n    React.cloneElement(Child, {\n      className: Child.props.className + `${active === id ? \" active\" : \"\"}`,\n      onClick: handleClick\n    })\n  );\n};\n\nSelect.Option = Option;\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}